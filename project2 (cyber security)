<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Application Security Scanner</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 3em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .scanner-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .scan-input-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 30px;
            color: white;
        }

        .input-group {
            display: flex;
            gap: 15px;
            align-items: end;
            margin-bottom: 20px;
        }

        .input-field {
            flex: 1;
        }

        .input-field label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .url-input {
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            background: rgba(255, 255, 255, 0.9);
        }

        .url-input:focus {
            outline: none;
            background: white;
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
        }

        .scan-btn {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            height: 50px;
        }

        .scan-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }

        .scan-btn:disabled {
            background: #95a5a6;
            cursor: not-allowed;
            transform: none;
        }

        .scan-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .scan-type {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }

        .scan-type label {
            display: flex;
            align-items: center;
            gap: 10px;
            cursor: pointer;
        }

        .scan-type input[type="checkbox"] {
            width: 18px;
            height: 18px;
            accent-color: #ff6b6b;
        }

        .progress-section {
            padding: 30px;
            display: none;
        }

        .progress-bar-container {
            background: #ecf0f1;
            height: 10px;
            border-radius: 5px;
            overflow: hidden;
            margin-bottom: 20px;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #3498db, #2ecc71);
            width: 0%;
            transition: width 0.5s ease;
            border-radius: 5px;
        }

        .progress-text {
            text-align: center;
            font-weight: 600;
            color: #2c3e50;
        }

        .results-section {
            padding: 30px;
            display: none;
        }

        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .results-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
            border-left: 5px solid;
        }

        .summary-card.critical { border-left-color: #e74c3c; }
        .summary-card.high { border-left-color: #f39c12; }
        .summary-card.medium { border-left-color: #f1c40f; }
        .summary-card.low { border-left-color: #27ae60; }
        .summary-card.info { border-left-color: #3498db; }

        .summary-card h3 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .vulnerability-list {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .vulnerability-item {
            padding: 20px;
            border-bottom: 1px solid #ecf0f1;
            transition: background-color 0.3s ease;
        }

        .vulnerability-item:hover {
            background-color: #f8f9fa;
        }

        .vulnerability-item:last-child {
            border-bottom: none;
        }

        .vulnerability-header {
            display: flex;
            justify-content: between;
            align-items: start;
            gap: 15px;
            margin-bottom: 10px;
        }

        .vulnerability-title {
            font-weight: 600;
            font-size: 1.1em;
            flex: 1;
        }

        .severity-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: 600;
            text-transform: uppercase;
            color: white;
        }

        .severity-critical { background: #e74c3c; }
        .severity-high { background: #f39c12; }
        .severity-medium { background: #f1c40f; color: #333; }
        .severity-low { background: #27ae60; }
        .severity-info { background: #3498db; }

        .vulnerability-description {
            color: #7f8c8d;
            margin-bottom: 15px;
            line-height: 1.5;
        }

        .vulnerability-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .detail-label {
            font-weight: 600;
            color: #2c3e50;
            font-size: 0.9em;
        }

        .detail-value {
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            background: white;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .recommendation {
            margin-top: 15px;
            padding: 15px;
            background: #e8f6f3;
            border-radius: 10px;
            border-left: 4px solid #27ae60;
        }

        .recommendation-title {
            font-weight: 600;
            color: #27ae60;
            margin-bottom: 5px;
        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .export-btn {
            background: linear-gradient(135deg, #2ecc71, #27ae60);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .export-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(46, 204, 113, 0.3);
        }

        .info-section {
            background: #f8f9fa;
            padding: 30px;
            border-top: 1px solid #ecf0f1;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .info-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .info-card h4 {
            color: #2c3e50;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .icon {
            font-size: 1.2em;
        }

        @media (max-width: 768px) {
            .input-group {
                flex-direction: column;
            }
            
            .scan-options {
                grid-template-columns: 1fr;
            }
            
            .results-summary {
                grid-template-columns: 1fr;
            }
        }

        .demo-notice {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            color: #856404;
        }

        .demo-notice strong {
            color: #b8860b;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🛡️ WebSec Scanner</h1>
            <p>Comprehensive Web Application Security Assessment Tool</p>
        </div>

        <div class="scanner-container">
            <div class="scan-input-section">
                <div class="demo-notice">
                    <strong>Educational Demo:</strong> This is a demonstration tool for learning web security concepts. It simulates security scans and generates realistic vulnerability reports for educational purposes.
                </div>
                
                <div class="input-group">
                    <div class="input-field">
                        <label for="targetUrl">Target URL</label>
                        <input type="url" id="targetUrl" class="url-input" placeholder="https://example.com" value="https://example.com">
                    </div>
                    <button class="scan-btn" onclick="startScan()">
                        <span id="scanBtnText">🚀 Start Security Scan</span>
                    </button>
                </div>

                <div class="scan-options">
                    <div class="scan-type">
                        <label>
                            <input type="checkbox" id="sqlInjection" checked>
                            <span>🗄️ SQL Injection</span>
                        </label>
                    </div>
                    <div class="scan-type">
                        <label>
                            <input type="checkbox" id="xss" checked>
                            <span>🔗 Cross-Site Scripting (XSS)</span>
                        </label>
                    </div>
                    <div class="scan-type">
                        <label>
                            <input type="checkbox" id="csrf" checked>
                            <span>🔐 CSRF Vulnerabilities</span>
                        </label>
                    </div>
                    <div class="scan-type">
                        <label>
                            <input type="checkbox" id="headers" checked>
                            <span>📋 Security Headers</span>
                        </label>
                    </div>
                    <div class="scan-type">
                        <label>
                            <input type="checkbox" id="ssl" checked>
                            <span>🔒 SSL/TLS Configuration</span>
                        </label>
                    </div>
                    <div class="scan-type">
                        <label>
                            <input type="checkbox" id="directory" checked>
                            <span>📁 Directory Traversal</span>
                        </label>
                    </div>
                </div>
            </div>

            <div class="progress-section" id="progressSection">
                <div class="progress-bar-container">
                    <div class="progress-bar" id="progressBar"></div>
                </div>
                <div class="progress-text" id="progressText">Initializing scan...</div>
            </div>

            <div class="results-section" id="resultsSection">
                <div class="results-header">
                    <h2>🔍 Security Assessment Results</h2>
                    <button class="export-btn" onclick="exportResults()">📄 Export Report</button>
                </div>

                <div class="results-summary" id="resultsSummary">
                    <!-- Summary cards will be populated here -->
                </div>

                <div class="vulnerability-list" id="vulnerabilityList">
                    <!-- Vulnerability items will be populated here -->
                </div>
            </div>

            <div class="info-section">
                <h2 style="text-align: center; margin-bottom: 30px; color: #2c3e50;">
                    <span class="icon">💡</span>
                    Web Security Knowledge Base
                </h2>
                <div class="info-grid">
                    <div class="info-card">
                        <h4><span class="icon">🗄️</span>SQL Injection</h4>
                        <p>Occurs when user input is improperly sanitized, allowing attackers to execute malicious SQL commands. Use parameterized queries and input validation to prevent.</p>
                    </div>
                    <div class="info-card">
                        <h4><span class="icon">🔗</span>Cross-Site Scripting (XSS)</h4>
                        <p>Allows attackers to inject malicious scripts into web pages viewed by other users. Implement proper input encoding and Content Security Policy (CSP).</p>
                    </div>
                    <div class="info-card">
                        <h4><span class="icon">🔐</span>CSRF Protection</h4>
                        <p>Cross-Site Request Forgery tricks users into performing unwanted actions. Use CSRF tokens and SameSite cookies for protection.</p>
                    </div>
                    <div class="info-card">
                        <h4><span class="icon">📋</span>Security Headers</h4>
                        <p>HTTP headers that provide additional security layers. Include HSTS, CSP, X-Frame-Options, and X-Content-Type-Options headers.</p>
                    </div>
                    <div class="info-card">
                        <h4><span class="icon">🔒</span>SSL/TLS Security</h4>
                        <p>Ensures secure communication between client and server. Use modern TLS versions, strong cipher suites, and proper certificate management.</p>
                    </div>
                    <div class="info-card">
                        <h4><span class="icon">📁</span>Directory Traversal</h4>
                        <p>Allows attackers to access files outside the intended directory. Validate and sanitize file paths, use allow-lists for file access.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let scanResults = [];
        let currentScan = null;

        // Sample vulnerability database for demonstration
        const vulnerabilityTemplates = {
            sqlInjection: [
                {
                    title: "SQL Injection in Login Form",
                    severity: "critical",
                    description: "The login form is vulnerable to SQL injection attacks through the username parameter. Attackers can bypass authentication or extract sensitive data.",
                    location: "/login.php",
                    parameter: "username",
                    payload: "' OR '1'='1",
                    recommendation: "Use parameterized queries or prepared statements. Never concatenate user input directly into SQL queries."
                },
                {
                    title: "Blind SQL Injection in Search",
                    severity: "high",
                    description: "Time-based blind SQL injection vulnerability detected in the search functionality.",
                    location: "/search.php",
                    parameter: "query",
                    payload: "' AND (SELECT SLEEP(5)) --",
                    recommendation: "Implement proper input validation and use parameterized queries for all database interactions."
                }
            ],
            xss: [
                {
                    title: "Reflected XSS in Search Parameter",
                    severity: "medium",
                    description: "User input is reflected back to the page without proper encoding, allowing script injection.",
                    location: "/search.php",
                    parameter: "q",
                    payload: "<script>alert('XSS')</script>",
                    recommendation: "Implement proper output encoding and input validation. Use Content Security Policy (CSP) headers."
                },
                {
                    title: "Stored XSS in Comment Section",
                    severity: "high",
                    description: "Comments are stored and displayed without proper sanitization, creating persistent XSS vulnerability.",
                    location: "/comments.php",
                    parameter: "comment",
                    payload: "<img src=x onerror=alert('Stored XSS')>",
                    recommendation: "Sanitize all user input before storage and encode output when displaying user-generated content."
                }
            ],
            csrf: [
                {
                    title: "CSRF in Password Change",
                    severity: "high",
                    description: "Password change functionality lacks CSRF protection, allowing attackers to change user passwords.",
                    location: "/change-password.php",
                    parameter: "N/A",
                    payload: "Malicious form submission",
                    recommendation: "Implement CSRF tokens for all state-changing operations and verify the token on the server side."
                }
            ],
            headers: [
                {
                    title: "Missing Security Headers",
                    severity: "medium",
                    description: "Several important security headers are missing, reducing protection against various attacks.",
                    location: "Global",
                    parameter: "HTTP Headers",
                    payload: "N/A",
                    recommendation: "Implement security headers: Content-Security-Policy, X-Frame-Options, X-Content-Type-Options, Strict-Transport-Security."
                }
            ],
            ssl: [
                {
                    title: "Weak SSL/TLS Configuration",
                    severity: "medium",
                    description: "The server supports weak cipher suites and older TLS versions.",
                    location: "Server Configuration",
                    parameter: "TLS Settings",
                    payload: "N/A",
                    recommendation: "Disable TLS 1.0/1.1, use only strong cipher suites, and implement HSTS headers."
                }
            ],
            directory: [
                {
                    title: "Directory Traversal Vulnerability",
                    severity: "high",
                    description: "Application allows access to files outside the web root directory.",
                    location: "/download.php",
                    parameter: "file",
                    payload: "../../../etc/passwd",
                    recommendation: "Validate file paths, use allow-lists for accessible files, and implement proper access controls."
                }
            ]
        };

        function startScan() {
            const url = document.getElementById('targetUrl').value;
            if (!url || !isValidUrl(url)) {
                alert('Please enter a valid URL');
                return;
            }

            // Reset results
            scanResults = [];
            document.getElementById('resultsSection').style.display = 'none';
            document.getElementById('progressSection').style.display = 'block';

            // Disable scan button
            const scanBtn = document.querySelector('.scan-btn');
            scanBtn.disabled = true;
            document.getElementById('scanBtnText').innerHTML = '<span class="loading-spinner"></span> Scanning...';

            // Start scanning process
            simulateScan();
        }

        function isValidUrl(string) {
            try {
                new URL(string);
                return true;
            } catch (_) {
                return false;
            }
        }

        function simulateScan() {
            const scanTypes = [];
            
            // Check which scan types are selected
            if (document.getElementById('sqlInjection').checked) scanTypes.push('sqlInjection');
            if (document.getElementById('xss').checked) scanTypes.push('xss');
            if (document.getElementById('csrf').checked) scanTypes.push('csrf');
            if (document.getElementById('headers').checked) scanTypes.push('headers');
            if (document.getElementById('ssl').checked) scanTypes.push('ssl');
            if (document.getElementById('directory').checked) scanTypes.push('directory');

            let currentStep = 0;
            const totalSteps = scanTypes.length * 2; // 2 steps per scan type for realism

            const scanInterval = setInterval(() => {
                currentStep++;
                const progress = (currentStep / totalSteps) * 100;
                
                document.getElementById('progressBar').style.width = progress + '%';
                
                // Update progress text
                const scanTypeIndex = Math.floor((currentStep - 1) / 2);
                if (scanTypeIndex < scanTypes.length) {
                    const scanType = scanTypes[scanTypeIndex];
                    document.getElementById('progressText').textContent = `Scanning for ${getScanTypeName(scanType)}...`;
                }

                // Add vulnerabilities randomly during scan
                if (currentStep % 2 === 0 && scanTypeIndex < scanTypes.length) {
                    const scanType = scanTypes[scanTypeIndex];
                    addRandomVulnerabilities(scanType);
                }

                if (currentStep >= totalSteps) {
                    clearInterval(scanInterval);
                    completeScan();
                }
            }, 800);
        }

        function getScanTypeName(scanType) {
            const names = {
                sqlInjection: 'SQL Injection vulnerabilities',
                xss: 'Cross-Site Scripting (XSS)',
                csrf: 'CSRF vulnerabilities',
                headers: 'Security headers',
                ssl: 'SSL/TLS configuration',
                directory: 'Directory traversal vulnerabilities'
            };
            return names[scanType] || scanType;
        }

        function addRandomVulnerabilities(scanType) {
            const templates = vulnerabilityTemplates[scanType];
            if (templates && templates.length > 0) {
                // Randomly decide whether to add vulnerabilities (70% chance)
                if (Math.random() > 0.3) {
                    const numVulns = Math.floor(Math.random() * templates.length) + 1;
                    for (let i = 0; i < numVulns; i++) {
                        if (templates[i]) {
                            scanResults.push({
                                ...templates[i],
                                id: Date.now() + Math.random(),
                                timestamp: new Date().toISOString()
                            });
                        }
                    }
                }
            }
        }

        function completeScan() {
            document.getElementById('progressSection').style.display = 'none';
            document.getElementById('resultsSection').style.display = 'block';

            // Re-enable scan button
            const scanBtn = document.querySelector('.scan-btn');
            scanBtn.disabled = false;
            document.getElementById('scanBtnText').innerHTML = '🚀 Start Security Scan';

            // Generate results
            displayResults();
        }

        function displayResults() {
            displaySummary();
            displayVulnerabilities();
        }

        function displaySummary() {
            const summary = {
                critical: 0,
                high: 0,
                medium: 0,
                low: 0,
                info: 0
            };

            scanResults.forEach(vuln => {
                summary[vuln.severity]++;
            });

            const summaryHtml = `
                <div class="summary-card critical">
                    <h3>${summary.critical}</h3>
                    <p>Critical</p>
                </div>
                <div class="summary-card high">
                    <h3>${summary.high}</h3>
                    <p>High Risk</p>
                </div>
                <div class="summary-card medium">
                    <h3>${summary.medium}</h3>
                    <p>Medium Risk</p>
                </div>
                <div class="summary-card low">
                    <h3>${summary.low}</h3>
                    <p>Low Risk</p>
                </div>
                <div class="summary-card info">
                    <h3>${scanResults.length}</h3>
                    <p>Total Issues</p>
                </div>
            `;

            document.getElementById('resultsSummary').innerHTML = summaryHtml;
        }

        function displayVulnerabilities() {
            if (scanResults.length === 0) {
                document.getElementById('vulnerabilityList').innerHTML = `
                    <div class="vulnerability-item">
                        <div class="vulnerability-header">
                            <div class="vulnerability-title">🎉 No vulnerabilities detected!</div>
                        </div>
                        <div class="vulnerability-description">
                            Great news! The security scan didn't detect any vulnerabilities based on the selected test categories. 
                            However, remember that security is an ongoing process and regular testing is recommended.
                        </div>
                    </div>
                `;
                return;
            }

            const vulnerabilitiesHtml = scanResults.map(vuln => `
                <div class="vulnerability-item">
                    <div class="vulnerability-header">
                        <div class="vulnerability-title">${vuln.title}</div>
                        <span class="severity-badge severity-${vuln.severity}">${vuln.severity}</span>
                    </div>
                    <div class="vulnerability-description">${vuln.description}</div>
                    <div class="vulnerability-details">
                        <div class="detail-item">
                            <span class="detail-label">Location</span>
                            <div class="detail-value">${vuln.location}</div>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Parameter</span>
                            <div class="detail-value">${vuln.parameter}</div>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Test Payload</span>
                            <div class="detail-value">${vuln.payload}</div>
                        </div>
                    </div>
                    <div class="recommendation">
                        <div class="recommendation-title">💡 Recommendation</div>
                        <div>${vuln.recommendation}</div>
                    </div>
                </div>
            `).join('');

            document.getElementById('vulnerabilityList').innerHTML = vulnerabilitiesHtml;
        }

        function exportResults() {
            const url = document.getElementById('targetUrl').value;
            const timestamp = new Date().toISOString();
            
            const report = {
                scanInfo: {
                    target: url,
                    timestamp: timestamp,
                    scanTypes: getSelectedScanTypes()
                },
                summary: getSummaryStats(),
                vulnerabilities: scanResults
            };

            const reportText = generateTextReport(report);
            downloadReport(reportText, `security-scan-${new Date().getTime()}.txt`);
        }

        function getSelectedScanTypes() {
            const types = [];
            if (document.getElementById('sqlInjection').checked) types.push('SQL Injection');
            if (document.getElementById('xss').checked) types.push('Cross-Site Scripting');
            if (document.getElementById('csrf').checked) types.push('CSRF');
            if (document.getElementById('headers').checked) types.push('Security Headers');
            if (document.getElementById('ssl').checked) types.push('SSL/TLS');
            if (document.getElementById('directory').checked) types.push('Directory Traversal');
            return types;
        }

        function getSummaryStats() {
            const summary = { critical: 0, high: 0, medium: 0, low: 0, info: 0 };
            scanResults.forEach(vuln => summary[vuln.severity]++);
            return summary;
        }

        function generateTextReport(report) {
            let text = `
WEB APPLICATION SECURITY SCAN REPORT
=====================================

Target: ${report.scanInfo.target}
Scan Date: ${new Date(report.scanInfo.timestamp).toLocaleString()}
Scan Types: ${report.scanInfo.scanTypes.join(', ')}

EXECUTIVE SUMMARY
-----------------
Critical: ${report.summary.critical}
High: ${report.summary.high}
Medium: ${report.summary.medium}
Low: ${report.summary.low}
Total Issues: ${report.vulnerabilities.length}

DETAILED FINDINGS
-----------------
`;

            report.vulnerabilities.forEach((vuln, index) => {
                text += `
${index + 1}. ${vuln.title}
   Severity: ${vuln.severity.toUpperCase()}
   Location: ${vuln.location}
   Parameter: ${vuln.parameter}
   Description: ${vuln.description}
   Recommendation: ${vuln.recommendation}
   
`;
            });

            text += `
DISCLAIMER
----------
This is an educational demonstration tool. Results are simulated for learning purposes.
For production security assessments, use professional security testing